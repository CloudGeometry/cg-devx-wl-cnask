# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Token {
  """JWT access token"""
  accessToken: JWT!

  """JWT refresh token"""
  refreshToken: JWT!
}

"""
A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
"""
scalar JWT

type Auth {
  """JWT access token"""
  accessToken: JWT!

  """JWT refresh token"""
  refreshToken: JWT!
  user: User!
}

type Profile {
  email: String!
  firstname: String
  lastname: String
  locale: String
  user: User
  phoneNumber: String
  photo: String
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Item {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  baseState: String!
  createdBy: User
  updatedBy: User
  title: String!
  description: String
  dueDate: DateTime!
  itemState: ItemState!
  assignee: User
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum ItemState {
  TODO
  DONE
}

type ItemEdge {
  cursor: String!
  node: Item!
}

type PaginatedItems {
  edges: [ItemEdge!]
  nodes: [Item!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type Role {
  id: ID!
  name: String!
  permissions: [JSONObject!]
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  baseState: String!
  createdBy: User
  updatedBy: User
  username: String
  role: Role
  profile: Profile
  items: [Item!]
}

type Invite {
  id: ID!
  email: String!
  createdAt: DateTime!
  createdById: String
  activate: Boolean!
  link: URL!
  aliasTenant: String
}

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

type Query {
  """Find a single user by ID"""
  me: User!

  """Find all users"""
  users(filter: UserFilterInput): [User!]!

  """Get signed url"""
  getUploadUrl(imageFormat: String!): String!

  """Get all items uses a pagination"""
  items(offset: Int, after: String, before: String, first: Int, last: Int, filter: ItemFilterInput, orderBy: ItemOrderByInput): PaginatedItems!

  """Get item by id"""
  item(id: String!): Item!

  """Get roles"""
  roles: [Role!]!

  """Find all inactivated invites"""
  invites: [Invite!]!

  """Get invite by id"""
  invite(id: String!): Invite!
}

input UserFilterInput {
  userFirstLastName: String
}

input ItemFilterInput {
  itemState: ItemState
}

input ItemOrderByInput {
  createdAt: Sort
  title: Sort
  itemState: Sort
}

enum Sort {
  ASC
  DESC
}

type Mutation {
  """Create user"""
  signup(data: UserAddInput!): Auth!

  """Confirm tenant"""
  confirmTenant(token: String!): Boolean!

  """Login user, return token"""
  login(data: LoginInput!): Auth!

  """Refresh token"""
  refreshToken(token: JWT!): Token!

  """Create new database by alias."""
  bootstrapTenant(email: String!, alias: String!): Boolean!

  """Update user profile"""
  updateProfile(id: String!, data: UpdateProfileInput!): Profile!

  """Update user role"""
  updateUserRole(id: String!, data: UpdateUserRoleInput!): User!

  """Change user password"""
  changePassword(data: ChangePasswordInput!): User!

  """Deactivate user"""
  deactivateUser(id: String!): User!

  """Activate user"""
  activateUser(id: String!): User!

  """Create item"""
  createItem(data: CreateItemInput!): Item!

  """Update item"""
  updateItem(id: String!, data: UpdateItemInput!): Item!

  """Delete item"""
  deleteItem(id: String!): Item!

  """Add role"""
  addRole(data: CreateRoleInput!): Role!

  """Update role"""
  updateRole(id: String!, data: UpdateRoleInput!): Role!

  """Delete role"""
  deleteRole(id: String!): Role!

  """Create invite"""
  createInvite(data: InviteInput!): Invite

  """Resend conformation link"""
  resendConfirmationLink(id: String!): Invite

  """Delete invite"""
  deleteInvite(id: String!): Invite

  """Decode invite token"""
  decodeInviteToken(token: String!): Invite
}

input UserAddInput {
  username: String!
  password: String!
  firstname: String!
  lastname: String!
  email: String
  role: String
  locale: String
  phoneNumber: String
  inviteId: String
  tenantAlias: String
}

input LoginInput {
  username: String!
  password: String!
  tenantAlias: String
}

input UpdateProfileInput {
  firstname: String
  lastname: String
  email: String
  locale: String
  phoneNumber: String
  photo: String
}

input UpdateUserRoleInput {
  roleId: String!
}

input ChangePasswordInput {
  oldPassword: String!
  newPassword: String!
}

input CreateItemInput {
  description: String!
  title: String!
  dueDate: DateTime!
  assigneeId: String
}

input UpdateItemInput {
  description: String
  title: String
  dueDate: DateTime
  assigneeId: String
  itemState: ItemState
}

input CreateRoleInput {
  name: String!
  permissions: [JSONObject!]!
}

input UpdateRoleInput {
  name: String
  permissions: [JSONObject!]
}

input InviteInput {
  email: String!
  tenantAlias: String
}